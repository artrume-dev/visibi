generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  password      String?   // For credentials login
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  workspaces    WorkspaceMember[]
  queries       Query[]
}

model Workspace {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  members       WorkspaceMember[]
  brands        Brand[]
  queries       Query[]
}

model WorkspaceMember {
  id            String    @id @default(cuid())
  role          String    @default("member") // admin, member, viewer
  
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
  
  @@unique([userId, workspaceId])
}

model Brand {
  id            String    @id @default(cuid())
  name          String
  domain        String
  keywords      String[]  @default([])
  
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  queries       Query[]
  competitors   Competitor[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Competitor {
  id            String    @id @default(cuid())
  name          String
  domain        String
  
  brandId       String
  brand         Brand     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
}

model Query {
  id            String    @id @default(cuid())
  query         String
  engine        String    // openai, anthropic, perplexity, google
  status        String    @default("pending") // pending, processing, completed, failed
  
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  brandId       String?
  brand         Brand?    @relation(fields: [brandId], references: [id], onDelete: SetNull)
  
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  responses     Response[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([workspaceId, createdAt])
  @@index([brandId])
}

model Response {
  id                String    @id @default(cuid())
  content           String    @db.Text
  rawResponse       Json
  
  // Analysis Results
  brandMentioned    Boolean   @default(false)
  mentionCount      Int       @default(0)
  position          Int?      // Position of first mention
  sentiment         String?   // positive, neutral, negative
  sentimentScore    Float?
  isRecommended     Boolean   @default(false)
  
  // Citations
  citations         Json      @default("[]")
  hasCitation       Boolean   @default(false)
  
  queryId           String
  query             Query     @relation(fields: [queryId], references: [id], onDelete: Cascade)
  
  competitorData    Json      @default("{}")
  
  createdAt         DateTime  @default(now())
  
  @@index([queryId])
}
